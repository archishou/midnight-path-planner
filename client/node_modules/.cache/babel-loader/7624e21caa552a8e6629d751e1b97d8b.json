{"ast":null,"code":"export function inspectMatrix() {\n  const indent = ' '.repeat(2);\n  const indentData = ' '.repeat(4);\n  return \"\".concat(this.constructor.name, \" {\\n\").concat(indent, \"[\\n\").concat(indentData).concat(inspectData(this, indentData), \"\\n\").concat(indent, \"]\\n\").concat(indent, \"rows: \").concat(this.rows, \"\\n\").concat(indent, \"columns: \").concat(this.columns, \"\\n}\");\n}\nconst maxRows = 15;\nconst maxColumns = 10;\nconst maxNumSize = 8;\n\nfunction inspectData(matrix, indent) {\n  const rows = matrix.rows,\n        columns = matrix.columns;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j)));\n    }\n\n    result.push(\"\".concat(line.join(' ')));\n  }\n\n  if (maxJ !== columns) {\n    result[result.length - 1] += \" ... \".concat(columns - maxColumns, \" more columns\");\n  }\n\n  if (maxI !== rows) {\n    result.push(\"... \".concat(rows - maxRows, \" more rows\"));\n  }\n\n  return result.join(\"\\n\".concat(indent));\n}\n\nfunction formatNumber(num) {\n  const numStr = String(num);\n\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n\n  const precise = num.toPrecision(maxNumSize - 2);\n\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.substring(eIndex);\n  return exponential.substring(0, maxNumSize - e.length) + e;\n}","map":null,"metadata":{},"sourceType":"module"}