{"ast":null,"code":"export function inspectMatrix() {\n  const indent = ' '.repeat(2);\n  const indentData = ' '.repeat(4);\n  return `${this.constructor.name} {\n${indent}[\n${indentData}${inspectData(this, indentData)}\n${indent}]\n${indent}rows: ${this.rows}\n${indent}columns: ${this.columns}\n}`;\n}\nconst maxRows = 15;\nconst maxColumns = 10;\nconst maxNumSize = 8;\n\nfunction inspectData(matrix, indent) {\n  const {\n    rows,\n    columns\n  } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j)));\n    }\n\n    result.push(`${line.join(' ')}`);\n  }\n\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n\n  return result.join(`\\n${indent}`);\n}\n\nfunction formatNumber(num) {\n  const numStr = String(num);\n\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n\n  const precise = num.toPrecision(maxNumSize - 2);\n\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.substring(eIndex);\n  return exponential.substring(0, maxNumSize - e.length) + e;\n}","map":{"version":3,"sources":["/Users/Archish/node_modules/ml-matrix/src/inspect.js"],"names":["inspectMatrix","indent","repeat","indentData","constructor","name","inspectData","rows","columns","maxRows","maxColumns","maxNumSize","matrix","maxI","Math","min","maxJ","result","i","line","j","push","formatNumber","get","join","length","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","e","substring"],"mappings":"AAAA,OAAO,SAASA,aAAT,GAAyB;AAC9B,QAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAW,CAAX,CAAf;AACA,QAAMC,UAAU,GAAG,IAAID,MAAJ,CAAW,CAAX,CAAnB;AACA,SAAQ,GAAE,KAAKE,WAAL,CAAiBC,IAAK;EAChCJ,MAAO;EACPE,UAAW,GAAEG,WAAW,CAAC,IAAD,EAAOH,UAAP,CAAmB;EAC3CF,MAAO;EACPA,MAAO,SAAQ,KAAKM,IAAK;EACzBN,MAAO,YAAW,KAAKO,OAAQ;EAL/B;AAOD;AAED,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,UAAU,GAAG,CAAnB;;AAEA,SAASL,WAAT,CAAqBM,MAArB,EAA6BX,MAA7B,EAAqC;AACnC,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBI,MAA1B;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASR,IAAT,EAAeE,OAAf,CAAb;AACA,QAAMO,IAAI,GAAGF,IAAI,CAACC,GAAL,CAASP,OAAT,EAAkBE,UAAlB,CAAb;AACA,QAAMO,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAApB,EAA0BK,CAAC,EAA3B,EAA+B;AAC7B,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7BD,MAAAA,IAAI,CAACE,IAAL,CAAUC,YAAY,CAACV,MAAM,CAACW,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAD,CAAtB;AACD;;AACDH,IAAAA,MAAM,CAACI,IAAP,CAAa,GAAEF,IAAI,CAACK,IAAL,CAAU,GAAV,CAAe,EAA9B;AACD;;AACD,MAAIR,IAAI,KAAKR,OAAb,EAAsB;AACpBS,IAAAA,MAAM,CAACA,MAAM,CAACQ,MAAP,GAAgB,CAAjB,CAAN,IAA8B,QAAOjB,OAAO,GAAGE,UAAW,eAA1D;AACD;;AACD,MAAIG,IAAI,KAAKN,IAAb,EAAmB;AACjBU,IAAAA,MAAM,CAACI,IAAP,CAAa,OAAMd,IAAI,GAAGE,OAAQ,YAAlC;AACD;;AACD,SAAOQ,MAAM,CAACO,IAAP,CAAa,KAAIvB,MAAO,EAAxB,CAAP;AACD;;AAED,SAASqB,YAAT,CAAsBI,GAAtB,EAA2B;AACzB,QAAMC,MAAM,GAAGC,MAAM,CAACF,GAAD,CAArB;;AACA,MAAIC,MAAM,CAACF,MAAP,IAAiBd,UAArB,EAAiC;AAC/B,WAAOgB,MAAM,CAACE,MAAP,CAAclB,UAAd,EAA0B,GAA1B,CAAP;AACD;;AACD,QAAMmB,OAAO,GAAGJ,GAAG,CAACK,WAAJ,CAAgBpB,UAAU,GAAG,CAA7B,CAAhB;;AACA,MAAImB,OAAO,CAACL,MAAR,IAAkBd,UAAtB,EAAkC;AAChC,WAAOmB,OAAP;AACD;;AACD,QAAME,WAAW,GAAGN,GAAG,CAACO,aAAJ,CAAkBtB,UAAU,GAAG,CAA/B,CAApB;AACA,QAAMuB,MAAM,GAAGF,WAAW,CAACG,OAAZ,CAAoB,GAApB,CAAf;AACA,QAAMC,CAAC,GAAGJ,WAAW,CAACK,SAAZ,CAAsBH,MAAtB,CAAV;AACA,SAAOF,WAAW,CAACK,SAAZ,CAAsB,CAAtB,EAAyB1B,UAAU,GAAGyB,CAAC,CAACX,MAAxC,IAAkDW,CAAzD;AACD","sourcesContent":["export function inspectMatrix() {\n  const indent = ' '.repeat(2);\n  const indentData = ' '.repeat(4);\n  return `${this.constructor.name} {\n${indent}[\n${indentData}${inspectData(this, indentData)}\n${indent}]\n${indent}rows: ${this.rows}\n${indent}columns: ${this.columns}\n}`;\n}\n\nconst maxRows = 15;\nconst maxColumns = 10;\nconst maxNumSize = 8;\n\nfunction inspectData(matrix, indent) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j)));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indent}`);\n}\n\nfunction formatNumber(num) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.substring(eIndex);\n  return exponential.substring(0, maxNumSize - e.length) + e;\n}\n"]},"metadata":{},"sourceType":"module"}