{"ast":null,"code":"import _slicedToArray from \"/Users/Archish/Documents/CodeProjects/Go/src/midnight-path-planner/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Archish/Documents/CodeProjects/Go/src/midnight-path-planner/client/src/pages/PathPlanning/PathPlanningViewer/Field.js\";\nimport React from 'react';\nimport { Layer, Stage, Line, Image as KonvaImage } from 'react-konva';\nimport useImage from 'use-image';\nimport './Field.css';\nimport Robot from './Robot';\nimport GetPoints from \"../HermiteCurveGenerator/Generator\";\nimport Point from \"../HermiteCurveGenerator/Point\";\nimport Constants from \"../Constants\";\nconst fieldImgURL = 'https://i.postimg.cc/XqTK09xY/field.png';\nconst fieldDim = Constants.FIELD_DIMENSIONS * Constants.FIELD_SCALE;\nlet yOffset = 0;\nexport default class Field extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      const eventX = e.evt.offsetX;\n      const eventY = e.evt.offsetY - yOffset;\n\n      if (this.state.drawingMode || this.state.knots.length === 0) {\n        this.setState({\n          opacity: 1,\n          knots: this.state.knots.concat(eventX, eventY),\n          robotFill: \"black\"\n        });\n      }\n\n      if (this.state.knots.length > 2) {\n        this.setState({\n          waypoints: this.getWayPoints(this.state.knots)\n        });\n      }\n    };\n\n    this.handleMouseMove = e => {\n      if (this.state.showPreview) {\n        const eventX = e.evt.offsetX;\n        const eventY = e.evt.offsetY - yOffset;\n\n        if (this.state.knots.length === 0) {\n          this.setState({\n            opacity: 0.5,\n            drawingMode: true,\n            roboty: eventY,\n            robotx: eventX\n          });\n        } else {\n          let previewWaypoints = this.state.knots.concat(eventX, eventY);\n\n          if (this.state.drawingMode && previewWaypoints.length > 2) {\n            this.setState({\n              previewKnots: this.getWayPoints(previewWaypoints)\n            });\n          } else {\n            this.setState({\n              previewKnots: []\n            });\n          }\n        }\n      }\n    };\n\n    this.drawingModeOff = e => {\n      this.setState({\n        drawingMode: false\n      });\n    };\n\n    this.drawingModeOn = e => {\n      this.setState({\n        drawingMode: true\n      });\n    };\n\n    this.enablePreview = e => {\n      this.setState({\n        showPreview: true\n      });\n    };\n\n    this.disablePreview = e => {\n      this.setState({\n        showPreview: false\n      });\n    };\n\n    this.state = {\n      previewKnots: [],\n      knots: [],\n      drawingMode: false,\n      robotFill: \"grey\",\n      waypoints: [],\n      showPreview: true\n    };\n  }\n\n  getWayPoints(knotsInput) {\n    let knots = [];\n    let updatedWaypoints = [];\n    let size = knotsInput.length;\n    let index = 0;\n\n    while (index < size) {\n      knots.push(new Point(knotsInput[index], knotsInput[index + 1]));\n      index = index + 2;\n    }\n\n    let points = GetPoints(knots);\n    size = points.length;\n    index = 0;\n\n    while (index < size) {\n      updatedWaypoints.push(points[index].x, points[index].y);\n      index++;\n    }\n\n    return updatedWaypoints;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Stage, {\n      width: fieldDim,\n      height: fieldDim,\n      y: yOffset,\n      onContentClick: this.handleClick,\n      onContentMouseMove: this.handleMouseMove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      ref: node => {\n        this.mainLayer = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(FieldImage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(Line, {\n      points: this.state.knots,\n      tension: 0,\n      stroke: \"red\",\n      strokeWidth: 4,\n      opacity: 0.25,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Line, {\n      points: this.state.previewKnots,\n      tension: 1,\n      stroke: \"black\",\n      strokeWidth: 4,\n      visible: this.state.showPreview,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(Line, {\n      points: this.state.waypoints,\n      tension: 0,\n      stroke: \"green\",\n      strokeWidth: 4,\n      opacity: 0.5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(Robot, {\n      waypoints: this.state.waypoints,\n      robotx: this.state.robotx,\n      roboty: this.state.roboty,\n      robotFill: this.state.robotFill,\n      drawingModeOff: this.drawingModeOff,\n      drawingModeOn: this.drawingModeOn,\n      opacity: this.state.opacity,\n      layer: this.mainLayer,\n      enablePreview: this.enablePreview,\n      disablePreview: this.disablePreview,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst FieldImage = () => {\n  const _useImage = useImage(fieldImgURL),\n        _useImage2 = _slicedToArray(_useImage, 1),\n        image = _useImage2[0];\n\n  return React.createElement(KonvaImage, {\n    image: image,\n    scaleX: Constants.FIELD_SCALE,\n    scaleY: Constants.FIELD_SCALE,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/Archish/Documents/CodeProjects/Go/src/midnight-path-planner/client/src/pages/PathPlanning/PathPlanningViewer/Field.js"],"names":["React","Layer","Stage","Line","Image","KonvaImage","useImage","Robot","GetPoints","Point","Constants","fieldImgURL","fieldDim","FIELD_DIMENSIONS","FIELD_SCALE","yOffset","Field","Component","constructor","props","handleClick","e","eventX","evt","offsetX","eventY","offsetY","state","drawingMode","knots","length","setState","opacity","concat","robotFill","waypoints","getWayPoints","handleMouseMove","showPreview","roboty","robotx","previewWaypoints","previewKnots","drawingModeOff","drawingModeOn","enablePreview","disablePreview","knotsInput","updatedWaypoints","size","index","push","points","x","y","render","node","mainLayer","FieldImage","image"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Layer, Stage, Line, Image as KonvaImage} from 'react-konva';\nimport useImage from 'use-image';\nimport './Field.css'\nimport Robot from './Robot'\nimport GetPoints from \"../HermiteCurveGenerator/Generator\";\nimport Point from \"../HermiteCurveGenerator/Point\"\nimport Constants from \"../Constants\";\nconst fieldImgURL = 'https://i.postimg.cc/XqTK09xY/field.png';\nconst fieldDim = Constants.FIELD_DIMENSIONS * Constants.FIELD_SCALE;\nlet yOffset = 0;\n\nexport default class Field extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            previewKnots: [],\n            knots: [],\n            drawingMode: false,\n            robotFill: \"grey\",\n            waypoints: [],\n            showPreview: true,\n        }\n    }\n\n    handleClick = (e) => {\n        const eventX = e.evt.offsetX;\n        const eventY =  e.evt.offsetY - yOffset;\n        if (this.state.drawingMode || this.state.knots.length === 0) {\n            this.setState(({\n                opacity: 1,\n                knots: this.state.knots.concat(eventX, eventY),\n                robotFill: \"black\"\n            }));\n        }\n        if (this.state.knots.length > 2) {\n            this.setState(({\n                waypoints: this.getWayPoints(this.state.knots)\n            }));\n        }\n    };\n\n    handleMouseMove = (e) => {\n        if (this.state.showPreview) {\n            const eventX = e.evt.offsetX;\n            const eventY =  e.evt.offsetY - yOffset;\n            if (this.state.knots.length === 0) {\n                this.setState({\n                    opacity: 0.5,\n                    drawingMode: true,\n                    roboty: eventY,\n                    robotx: eventX,\n                });\n            } else {\n                let previewWaypoints = this.state.knots.concat(eventX, eventY);\n                if (this.state.drawingMode && previewWaypoints.length > 2) {\n                    this.setState({\n                        previewKnots: this.getWayPoints(previewWaypoints)\n                    });\n                } else {\n                    this.setState({\n                        previewKnots: []\n                    });\n                }\n\n            }\n        }\n    };\n\n    drawingModeOff = (e) => {\n        this.setState({\n            drawingMode: false\n        });\n    };\n\n    drawingModeOn = (e) => {\n        this.setState({\n            drawingMode: true\n        });\n    };\n\n    enablePreview = (e) => {\n        this.setState({\n            showPreview: true\n        });\n    };\n\n    disablePreview = (e) => {\n        this.setState({\n            showPreview: false\n        });\n    };\n\n\n    getWayPoints(knotsInput) {\n        let knots = [];\n        let updatedWaypoints = [];\n        let size = knotsInput.length;\n        let index = 0;\n        while (index < size) {\n            knots.push(new Point(knotsInput[index], knotsInput[index + 1]));\n            index = index + 2;\n        }\n\n        let points = GetPoints(knots);\n\n        size = points.length;\n        index = 0;\n        while (index < size) {\n            updatedWaypoints.push(points[index].x, points[index].y);\n            index++\n        }\n\n        return updatedWaypoints\n    }\n\n    render() {\n        return (\n            <div className={\"field\"}>\n                <Stage width={fieldDim} height={fieldDim}\n                       y={yOffset}\n                       onContentClick={this.handleClick}\n                       onContentMouseMove={this.handleMouseMove}\n                >\n                    <Layer ref={\n                        node => {\n                            this.mainLayer = node;\n                        }}>\n                        <FieldImage/>\n                        <Line\n                            points={this.state.knots}\n                            tension={0}\n                            stroke=\"red\"\n                            strokeWidth={4}\n                            opacity={0.25}\n                        />\n                        <Line\n                            points={this.state.previewKnots}\n                            tension={1}\n                            stroke=\"black\"\n                            strokeWidth={4}\n                            visible={this.state.showPreview}\n                        />\n                        <Line\n                            points={this.state.waypoints}\n                            tension={0}\n                            stroke=\"green\"\n                            strokeWidth={4}\n                            opacity={0.5}\n                        />\n                        <Robot waypoints={this.state.waypoints}\n                               robotx={this.state.robotx}\n                               roboty={this.state.roboty}\n                               robotFill={this.state.robotFill}\n                               drawingModeOff={this.drawingModeOff}\n                               drawingModeOn={this.drawingModeOn}\n                               opacity={this.state.opacity}\n                               layer={this.mainLayer}\n                               enablePreview={this.enablePreview}\n                               disablePreview={this.disablePreview}\n                        />\n\n                    </Layer>\n                </Stage>\n            </div>\n        );\n    }\n}\n\nconst FieldImage = () => {\n    const [image] = useImage(fieldImgURL);\n    return <KonvaImage image={image} scaleX={Constants.FIELD_SCALE} scaleY={Constants.FIELD_SCALE}/>;\n};"]},"metadata":{},"sourceType":"module"}