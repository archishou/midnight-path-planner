{"ast":null,"code":"import _defineProperty from \"/Users/Archish/Documents/CodeProjects/Go/src/midnight-path-planner/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/Archish/Documents/CodeProjects/Go/src/midnight-path-planner/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Archish/Documents/CodeProjects/Go/src/midnight-path-planner/client/src/pages/PathPlanning/PathPlanningEditor/Editor.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"; // fake data generator\n\nconst getItems = count => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: \"knot-\".concat(k),\n  content: \"Knot \".concat(k)\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n\n  const _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: \"0 0 \".concat(8, \"px 0\"),\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\"\n}, draggableStyle);\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  width: \"20vw\",\n  float: \"left\"\n});\n\nexport default class Editor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(10)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(this.state.items, result.source.index, result.destination.index);\n    this.setState({\n      items\n    });\n  } // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n\n  render() {\n    return React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Droppable, {\n      droppableId: \"droppable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({}, provided.droppableProps, {\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), this.state.items.map((item, index) => React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), item.content))), provided.placeholder)));\n  }\n\n}","map":{"version":3,"sources":["/Users/Archish/Documents/CodeProjects/Go/src/midnight-path-planner/client/src/pages/PathPlanning/PathPlanningEditor/Editor.js"],"names":["React","Component","DragDropContext","Droppable","Draggable","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","float","Editor","constructor","props","state","items","onDragEnd","bind","destination","source","index","setState","render","provided","snapshot","droppableProps","innerRef","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n    Array.from({ length: count }, (v, k) => k).map(k => ({\n        id: `knot-${k}`,\n        content: `Knot ${k}`\n    }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    padding: grid * 2,\n    margin: `0 0 ${8}px 0`,\n\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\",\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    width: \"20vw\",\n    float: \"left\"\n});\n\nexport default class Editor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: getItems(10)\n        };\n        this.onDragEnd = this.onDragEnd.bind(this);\n    }\n\n    onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) {\n            return;\n        }\n\n        const items = reorder(\n            this.state.items,\n            result.source.index,\n            result.destination.index\n        );\n\n        this.setState({\n            items\n        });\n    }\n\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    render() {\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <Droppable droppableId=\"droppable\">\n                    {(provided, snapshot) => (\n                        <div\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}\n                        >\n                            {this.state.items.map((item, index) => (\n                                <Draggable key={item.id} draggableId={item.id} index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}\n                                        >\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}