{"ast":null,"code":"import Matrix from './matrix';\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = Matrix.checkMatrix(xMatrix);\n  let yIsSame = false;\n\n  if (typeof yMatrix === 'object' && !Matrix.isMatrix(yMatrix) && !Array.isArray(yMatrix)) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = Matrix.checkMatrix(yMatrix);\n  }\n\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const {\n    center = true,\n    scale = true\n  } = options;\n\n  if (center) {\n    xMatrix.center('column');\n\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n\n  if (scale) {\n    xMatrix.scale('column');\n\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', {\n    unbiased: true\n  });\n  const sdy = yIsSame ? sdx : yMatrix.standardDeviation('column', {\n    unbiased: true\n  });\n  const corr = xMatrix.transpose().mmul(yMatrix);\n\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(i, j, corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n\n  return corr;\n}","map":{"version":3,"sources":["/Users/Archish/node_modules/ml-matrix/src/correlation.js"],"names":["Matrix","correlation","xMatrix","yMatrix","options","checkMatrix","yIsSame","isMatrix","Array","isArray","rows","TypeError","center","scale","sdx","standardDeviation","unbiased","sdy","corr","transpose","mmul","i","j","columns","set","get"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,OAAO,GAAGD,OAAxC,EAAiDE,OAAO,GAAG,EAA3D,EAA+D;AACpEF,EAAAA,OAAO,GAAGF,MAAM,CAACK,WAAP,CAAmBH,OAAnB,CAAV;AACA,MAAII,OAAO,GAAG,KAAd;;AACA,MACE,OAAOH,OAAP,KAAmB,QAAnB,IACA,CAACH,MAAM,CAACO,QAAP,CAAgBJ,OAAhB,CADD,IAEA,CAACK,KAAK,CAACC,OAAN,CAAcN,OAAd,CAHH,EAIE;AACAC,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGD,OAAV;AACAI,IAAAA,OAAO,GAAG,IAAV;AACD,GARD,MAQO;AACLH,IAAAA,OAAO,GAAGH,MAAM,CAACK,WAAP,CAAmBF,OAAnB,CAAV;AACD;;AACD,MAAID,OAAO,CAACQ,IAAR,KAAiBP,OAAO,CAACO,IAA7B,EAAmC;AACjC,UAAM,IAAIC,SAAJ,CAAc,iDAAd,CAAN;AACD;;AAED,QAAM;AAAEC,IAAAA,MAAM,GAAG,IAAX;AAAiBC,IAAAA,KAAK,GAAG;AAAzB,MAAkCT,OAAxC;;AACA,MAAIQ,MAAJ,EAAY;AACVV,IAAAA,OAAO,CAACU,MAAR,CAAe,QAAf;;AACA,QAAI,CAACN,OAAL,EAAc;AACZH,MAAAA,OAAO,CAACS,MAAR,CAAe,QAAf;AACD;AACF;;AACD,MAAIC,KAAJ,EAAW;AACTX,IAAAA,OAAO,CAACW,KAAR,CAAc,QAAd;;AACA,QAAI,CAACP,OAAL,EAAc;AACZH,MAAAA,OAAO,CAACU,KAAR,CAAc,QAAd;AACD;AACF;;AAED,QAAMC,GAAG,GAAGZ,OAAO,CAACa,iBAAR,CAA0B,QAA1B,EAAoC;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAApC,CAAZ;AACA,QAAMC,GAAG,GAAGX,OAAO,GACfQ,GADe,GAEfX,OAAO,CAACY,iBAAR,CAA0B,QAA1B,EAAoC;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAApC,CAFJ;AAIA,QAAME,IAAI,GAAGhB,OAAO,CAACiB,SAAR,GAAoBC,IAApB,CAAyBjB,OAAzB,CAAb;;AACA,OAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACR,IAAzB,EAA+BW,CAAC,EAAhC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrCJ,MAAAA,IAAI,CAACM,GAAL,CACEH,CADF,EAEEC,CAFF,EAGEJ,IAAI,CAACO,GAAL,CAASJ,CAAT,EAAYC,CAAZ,KAAkB,KAAKR,GAAG,CAACO,CAAD,CAAH,GAASJ,GAAG,CAACK,CAAD,CAAjB,CAAlB,KAA4C,KAAKpB,OAAO,CAACQ,IAAR,GAAe,CAApB,CAA5C,CAHF;AAKD;AACF;;AACD,SAAOQ,IAAP;AACD","sourcesContent":["import Matrix from './matrix';\n\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = Matrix.checkMatrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = Matrix.checkMatrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n"]},"metadata":{},"sourceType":"module"}