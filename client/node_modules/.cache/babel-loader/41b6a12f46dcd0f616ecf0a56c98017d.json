{"ast":null,"code":"var _jsxFileName = \"/Users/Archish/Downloads/react-router-layout-guide-master/src/pages/PathPlanning/PathPlanningViewer/Robot.js\";\nimport React from 'react';\nimport { Rect } from 'react-konva';\nimport Constants from \"../Constants\";\nimport sleep from '../Utils';\n\nclass Robot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.rbtOffset = Constants.ROBOT_SIZE / 2;\n\n    this.travel = async () => {\n      this.rotateToAngle(0);\n      this.setState({\n        absoluteTheta: 0\n      });\n      this.props.disablePreview();\n      let waypoints = this.props.waypoints;\n      let index = 0;\n\n      while (index < waypoints.length - 1) {\n        this.rect.to({\n          x: waypoints[index],\n          y: waypoints[index + 1],\n          duration: Constants.PATH_RESOLUTION\n        });\n        let dy = waypoints[index + 3] - waypoints[index + 1];\n        let dx = waypoints[index] - waypoints[index + 2];\n        let theta = 180 * Math.atan2(dy, dx) / Math.PI;\n\n        if (this.rect.x() !== waypoints[index] && this.rect.y() !== waypoints[index + 1]) {\n          await sleep(1000 * Constants.PATH_RESOLUTION);\n        }\n\n        this.rotateToAngle(theta);\n        index += 2;\n      }\n\n      this.props.enablePreview();\n    };\n\n    this.state = {\n      absoluteTheta: 0\n    };\n  }\n\n  rotateToAngle(angle) {\n    if (isNaN(angle)) return;\n    console.log(\"Absolute Theta %f\", this.state.absoluteTheta);\n    let theta = angle - this.state.absoluteTheta;\n    this.rect.rotate(-theta);\n    this.setState({\n      absoluteTheta: theta + this.state.absoluteTheta\n    });\n  }\n\n  render() {\n    return React.createElement(Rect, {\n      ref: node => {\n        this.rect = node;\n      },\n      width: Constants.ROBOT_SIZE,\n      height: Constants.ROBOT_SIZE,\n      x: this.props.robotx,\n      y: this.props.roboty,\n      visible: true,\n      fill: this.props.robotFill,\n      onClick: this.travel,\n      onMouseEnter: this.props.drawingModeOff,\n      onMouseLeave: this.props.drawingModeOn,\n      opacity: this.props.opacity,\n      offsetX: this.rbtOffset,\n      offsetY: this.rbtOffset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Robot;","map":{"version":3,"sources":["/Users/Archish/Downloads/react-router-layout-guide-master/src/pages/PathPlanning/PathPlanningViewer/Robot.js"],"names":["React","Rect","Constants","sleep","Robot","Component","constructor","props","rbtOffset","ROBOT_SIZE","travel","rotateToAngle","setState","absoluteTheta","disablePreview","waypoints","index","length","rect","to","x","y","duration","PATH_RESOLUTION","dy","dx","theta","Math","atan2","PI","enablePreview","state","angle","isNaN","console","log","rotate","render","node","robotx","roboty","robotFill","drawingModeOff","drawingModeOn","opacity"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport { Rect } from 'react-konva';\nimport Constants from \"../Constants\";\nimport sleep from '../Utils'\nclass Robot extends React.Component {\n    rbtOffset = (Constants.ROBOT_SIZE / 2);\n    constructor(props) {\n        super(props);\n        this.state = {\n            absoluteTheta: 0,\n        }\n    }\n    travel = async () => {\n        this.rotateToAngle(0);\n        this.setState({\n            absoluteTheta: 0\n        });\n        this.props.disablePreview();\n        let waypoints = this.props.waypoints;\n        let index = 0;\n        while (index < waypoints.length - 1) {\n            this.rect.to({\n                x: waypoints[index],\n                y: waypoints[index + 1],\n                duration: Constants.PATH_RESOLUTION\n            });\n            let dy = waypoints[index + 3] - waypoints[index + 1];\n            let dx = waypoints[index] - waypoints[index + 2];\n            let theta = (180 * Math.atan2(dy, dx)) / Math.PI;\n            if (this.rect.x() !== waypoints[index] &&\n                this.rect.y() !== waypoints[index + 1]) {\n                await sleep(1000 * Constants.PATH_RESOLUTION);\n            }\n            this.rotateToAngle(theta);\n            index += 2;\n        }\n        this.props.enablePreview();\n    };\n    rotateToAngle(angle) {\n        if (isNaN(angle)) return;\n        console.log(\"Absolute Theta %f\", this.state.absoluteTheta);\n        let theta = angle - this.state.absoluteTheta;\n        this.rect.rotate(-theta);\n        this.setState({\n            absoluteTheta: theta + this.state.absoluteTheta\n        });\n    }\n    render() {\n        return (\n            <Rect\n                ref={node => {\n                    this.rect = node;\n                }}\n                width={Constants.ROBOT_SIZE}\n                height={Constants.ROBOT_SIZE}\n                x={this.props.robotx}\n                y={this.props.roboty}\n                visible={true}\n                fill={this.props.robotFill}\n                onClick={this.travel}\n                onMouseEnter={this.props.drawingModeOff}\n                onMouseLeave={this.props.drawingModeOn}\n                opacity={this.props.opacity}\n                offsetX={this.rbtOffset}\n                offsetY={this.rbtOffset}\n            />\n        );\n    }\n}\nexport default Robot"]},"metadata":{},"sourceType":"module"}